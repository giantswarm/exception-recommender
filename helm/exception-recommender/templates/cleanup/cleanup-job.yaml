{{- if and .Values.cleanupJob.enabled -}}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "recommender.cleanupJob" . }}
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    {{- include "recommender.cleanupJobAnnotations" . | nindent 4 }}
  labels:
    app.kubernetes.io/component: {{ include "recommender.cleanupJob" . | quote }}
    {{- include "labels.selector" . | nindent 4 }}
spec:
  backoffLimit: 2
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: {{ include "resource.default.name"  . }}
      securityContext:
        seccompProfile:
          type: RuntimeDefault
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        effect: NoSchedule
      containers:
        - name: kubectl
          image: "{{ default .Values.image.registry (include "global.imageRegistry" . ) }}/giantswarm/docker-kubectl:{{ .Values.crds.image.tag }}"
          command:
              - sh
              - '-c'
              - |
                set -o errexit ; set -o xtrace ; set -o nounset

                # piping stderr to stdout means kubectl's errors are surfaced
                # in the pod's logs.
                kubectl delete policyexceptiondrafts -n {{ .Values.recommender.destinationNamespace }} --all 2>&1
          resources: {{- toYaml .Values.crds.resources | nindent 12 }}
          securityContext:
            seccompProfile:
              type: RuntimeDefault
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            privileged: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
              - ALL
{{- end -}}
